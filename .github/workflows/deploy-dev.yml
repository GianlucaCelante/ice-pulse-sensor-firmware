# .github/workflows/deploy-dev.yml - ESP32 Development
name: Deploy Firmware to Development

on:
  push:
    branches: [release-dev]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.gitignore'
  
  workflow_dispatch:
    inputs:
      version_override:
        description: 'Override version from VERSION file'
        required: false
        default: ''

env:
  ESP_IDF_VERSION: "v5.1.2"
  FIRMWARE_IMAGE: aipioppi/ice-pulse-firmware
  INFRA_REPO_URL: git@github.com:GianlucaCelante/ice-pulse-infra.git
  INFRA_BRANCH: master
  DEPLOY_PATH_DEV: devops/dev/firmware-ota-dev.yml

jobs:
  build:
    name: Build ESP32 Firmware
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      firmware_size: ${{ steps.build_info.outputs.firmware_size }}
      
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Get Version
      id: get_version
      run: |
        if [ -n "${{ github.event.inputs.version_override }}" ]; then
          VERSION="${{ github.event.inputs.version_override }}"
        else
          VERSION=$(cat VERSION | tr -d '\n\r' | xargs)
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Building firmware version: $VERSION"
        
    - name: Update version.h
      run: |
        # Aggiorna solo version.h con la versione corrente
        cat > firmware/main/version.h << EOF
        #ifndef VERSION_H
        #define VERSION_H
        #define FIRMWARE_VERSION "${{ steps.get_version.outputs.version }}"
        #define BUILD_TIMESTAMP "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
        #define GIT_COMMIT "${{ github.sha }}"
        #define BUILD_NUMBER "${{ github.run_number }}"
        #endif
        EOF
        
    - name: Setup ESP-IDF and Build
      uses: espressif/esp-idf-ci-action@v1
      with:
        esp_idf_version: ${{ env.ESP_IDF_VERSION }}
        target: esp32
        path: 'firmware'
        command: idf.py build
        
    - name: Check Build Output
      id: build_info
      run: |
        cd firmware
        
        # Cerca il binario del firmware
        if [ -f "build/ice-pulse-sensor.bin" ]; then
          BINARY_NAME="ice-pulse-sensor.bin"
        else
          echo "❌ Firmware binary not found!"
          exit 1
        fi
        
        # Ottieni dimensione del firmware
        FIRMWARE_SIZE=$(stat -c%s "build/$BINARY_NAME")
        echo "firmware_size=$FIRMWARE_SIZE" >> $GITHUB_OUTPUT
        echo "Firmware size: $FIRMWARE_SIZE bytes"
        
    - name: Create OTA Package
      run: |
        mkdir -p ota-package
        
        # Copia i file necessari per OTA
        cp firmware/build/ice-pulse-sensor.bin ota-package/firmware.bin
        cp firmware/build/bootloader/bootloader.bin ota-package/
        cp firmware/build/partition_table/partition-table.bin ota-package/
        
        # Genera manifest OTA
        cat > ota-package/manifest.json << EOF
        {
          "version": "${{ steps.get_version.outputs.version }}",
          "build_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "firmware_size": ${{ steps.build_info.outputs.firmware_size }},
          "sha256": "$(sha256sum ota-package/firmware.bin | cut -d' ' -f1)",
          "target": "esp32",
          "idf_version": "${{ env.ESP_IDF_VERSION }}",
          "commit": "${{ github.sha }}",
          "branch": "${{ github.ref_name }}",
          "environment": "development"
        }
        EOF
        
    - name: Upload Firmware Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: firmware-${{ steps.get_version.outputs.version }}
        path: ota-package/
        retention-days: 30

  package:
    name: Package OTA Server
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Download Firmware
      uses: actions/download-artifact@v4
      with:
        name: firmware-${{ needs.build.outputs.version }}
        path: ./firmware
        
    - name: Create OTA Server
      run: |
        mkdir -p ota-server/static/firmware
        mkdir -p ota-server/templates
        
        # Copia firmware
        cp -r firmware/* ota-server/static/firmware/
        
        # Server OTA minimo
        cat > ota-server/app.py << 'EOF'
        from flask import Flask, jsonify, send_from_directory
        import json
        from datetime import datetime
        
        app = Flask(__name__)
        
        @app.route('/health')
        def health():
            return jsonify({"status": "ok", "timestamp": datetime.utcnow().isoformat()})
        
        @app.route('/firmware/manifest')
        def firmware_manifest():
            with open('static/firmware/manifest.json') as f:
                return json.load(f)
        
        @app.route('/firmware/download')
        def download_firmware():
            return send_from_directory('static/firmware', 'firmware.bin')
        
        @app.route('/firmware/check/<device_version>')
        def check_update(device_version):
            with open('static/firmware/manifest.json') as f:
                manifest = json.load(f)
            
            needs_update = device_version != manifest['version']
            return jsonify({
                "needs_update": needs_update,
                "latest_version": manifest['version'],
                "current_version": device_version,
                "download_url": "/firmware/download" if needs_update else None
            })
        
        if __name__ == '__main__':
            app.run(host='0.0.0.0', port=5000)
        EOF
        
        # Requirements
        cat > ota-server/requirements.txt << 'EOF'
        flask==3.0.0
        gunicorn==21.2.0
        EOF
        
        # Dockerfile
        cat > ota-server/Dockerfile << 'EOF'
        FROM python:3.11-alpine
        WORKDIR /app
        RUN apk add --no-cache curl
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt
        COPY . .
        EXPOSE 5000
        HEALTHCHECK CMD curl -f http://localhost:5000/health || exit 1
        CMD ["gunicorn", "--bind", "0.0.0.0:5000", "--workers", "2", "app:app"]
        EOF

    # AGGIUNGI QUESTO STEP PER IL LOGIN A DOCKER HUB
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: ./ota-server
        push: true
        tags: |
          ${{ env.FIRMWARE_IMAGE }}-ota:${{ needs.build.outputs.version }}
          ${{ env.FIRMWARE_IMAGE }}-ota:dev-latest

  deploy:
    name: Deploy to Infrastructure
    runs-on: ubuntu-latest
    needs: [build, package]
    
    steps:
    - name: Setup SSH Key
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}
        
    - name: Update Infrastructure
      run: |
        # Clone infra repo
        git clone ${{ env.INFRA_REPO_URL }} infra-repo
        cd infra-repo
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        # Crea/aggiorna docker-compose per OTA server
        mkdir -p $(dirname ${{ env.DEPLOY_PATH_DEV }})
        cat > ${{ env.DEPLOY_PATH_DEV }} << EOF
        version: '3.8'
        services:
          ice-pulse-ota-dev:
            image: ${{ env.FIRMWARE_IMAGE }}-ota:${{ needs.build.outputs.version }}
            container_name: ice-pulse-ota-dev
            ports:
              - "8092:5000"
            environment:
              - ENVIRONMENT=development
              - FIRMWARE_VERSION=${{ needs.build.outputs.version }}
            restart: always
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
              interval: 30s
              timeout: 10s
              retries: 3
        EOF
        
        # Commit e push
        git add ${{ env.DEPLOY_PATH_DEV }}
        git commit -m "Deploy firmware OTA dev: ${{ needs.build.outputs.version }}" || exit 0
        git push origin ${{ env.INFRA_BRANCH }}