# .github/workflows/deploy-dev.yml - ESP32 Development
name: Deploy Firmware to Development

on:
  push:
    branches: [release-dev]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.gitignore'
  
  workflow_dispatch:
    inputs:
      version_override:
        description: 'Override version from VERSION file'
        required: false
        default: ''

env:
  ESP_IDF_VERSION: "v5.1.2"
  FIRMWARE_IMAGE: aipioppi/ice-pulse-firmware
  INFRA_REPO_URL: git@github.com:GianlucaCelante/ice-pulse-infra.git
  INFRA_BRANCH: master
  DEPLOY_PATH_DEV: devops/dev/firmware-ota-dev.yml

jobs:
  build:
    name: Build ESP32 Firmware
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      firmware_size: ${{ steps.build_info.outputs.firmware_size }}
      
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Fix Missing Components Directory
      run: |
        # Create components directory if it doesn't exist
        mkdir -p firmware/components
        
        # Simplify main CMakeLists.txt to only include existing files
        cat > firmware/main/CMakeLists.txt << 'EOF'
        idf_component_register(
            SRCS 
                "Main.c"
            
            INCLUDE_DIRS 
                "."
            
            REQUIRES 
                nvs_flash
                esp_wifi
                esp_http_client
                esp_https_ota
                json
                lwip
                esp_netif
                esp_event
                driver
                esp_timer
        )
        EOF
        
        # Create a simplified Main.c with separated OTA logic
        cat > firmware/main/Main.c << 'EOF'
        // firmware/main/main.c - Ice Pulse ESP32 Main Application (OTA Separato)
        #include <stdio.h>
        #include <stdlib.h>
        #include <string.h>
        #include <time.h>
        #include "freertos/FreeRTOS.h"
        #include "freertos/task.h"
        #include "esp_system.h"
        #include "esp_log.h"
        #include "esp_wifi.h"
        #include "esp_event.h"
        #include "esp_netif.h"
        #include "nvs_flash.h"
        
        #include "version.h"
        #include "config.h"
        
        static const char *TAG = "ICE_PULSE_MAIN";
        
        // Task handles
        static TaskHandle_t sensor_task_handle = NULL;
        static TaskHandle_t data_send_task_handle = NULL;
        static TaskHandle_t ota_check_task_handle = NULL;
        
        // Application state
        typedef struct {
            bool wifi_connected;
            bool sensors_initialized;
            bool ota_in_progress;
            uint32_t reading_count;
            uint32_t data_send_count;
            uint32_t ota_check_count;
            float last_temperature;
            float last_humidity;
        } app_state_t;
        
        static app_state_t app_state = {0};
        
        /**
         * @brief Task di lettura sensori - PRIORITÀ ALTA
         */
        void sensor_task(void *parameter) {
            ESP_LOGI(TAG, "🌡️ Sensor task started");
            
            while (1) {
                // Simula lettura sensori
                app_state.last_temperature = -18.5f + (esp_random() % 100) / 100.0f;
                app_state.last_humidity = 65.0f + (esp_random() % 200 - 100) / 100.0f;
                app_state.reading_count++;
                
                ESP_LOGI(TAG, "📊 Reading #%lu - T:%.2f°C H:%.2f%%", 
                         app_state.reading_count, app_state.last_temperature, app_state.last_humidity);
                
                // Lettura ogni 5 minuti
                vTaskDelay(pdMS_TO_TICKS(5 * 60 * 1000));
            }
        }
        
        /**
         * @brief Task di invio dati - SEPARATO da OTA
         */
        void data_send_task(void *parameter) {
            ESP_LOGI(TAG, "📡 Data send task started");
            
            while (1) {
                if (app_state.wifi_connected && app_state.reading_count > 0) {
                    ESP_LOGI(TAG, "📤 Sending data #%lu to API (NO OTA CHECK HERE)", 
                             app_state.data_send_count + 1);
                    
                    // Simula invio dati (senza controllo OTA)
                    app_state.data_send_count++;
                    ESP_LOGI(TAG, "✅ Data sent successfully");
                }
                
                // Invio ogni 10 minuti (SEPARATO da OTA)
                vTaskDelay(pdMS_TO_TICKS(10 * 60 * 1000));
            }
        }
        
        /**
         * @brief Task controllo OTA - COMPLETAMENTE SEPARATO
         */
        void ota_check_task(void *parameter) {
            ESP_LOGI(TAG, "🔄 OTA check task started (every 6 hours)");
            
            // Primo check dopo 30 secondi
            vTaskDelay(pdMS_TO_TICKS(30000));
            
            while (1) {
                if (app_state.wifi_connected && !app_state.ota_in_progress) {
                    ESP_LOGI(TAG, "🔍 OTA Check #%lu - Checking %s", 
                             app_state.ota_check_count + 1, "http://localhost:8092");
                    
                    // Simula controllo OTA
                    app_state.ota_check_count++;
                    ESP_LOGI(TAG, "✅ Firmware is up to date");
                }
                
                // Check ogni 6 ore (INDIPENDENTE dai dati)
                vTaskDelay(pdMS_TO_TICKS(6 * 60 * 60 * 1000));
            }
        }
        
        /**
         * @brief Inizializzazione applicazione
         */
        esp_err_t app_init(void) {
            ESP_LOGI(TAG, "🚀 Starting Ice Pulse Sensor v%s", FIRMWARE_VERSION);
            ESP_LOGI(TAG, "📋 OTA Strategy: Separated tasks - Data every 10min, OTA check every 6h");
            
            // Inizializza NVS
            esp_err_t ret = nvs_flash_init();
            if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND) {
                ESP_ERROR_CHECK(nvs_flash_erase());
                ret = nvs_flash_init();
            }
            ESP_ERROR_CHECK(ret);
            
            // Inizializza networking
            ESP_ERROR_CHECK(esp_netif_init());
            ESP_ERROR_CHECK(esp_event_loop_create_default());
            
            app_state.wifi_connected = true;
            app_state.sensors_initialized = true;
            
            return ESP_OK;
        }
        
        /**
         * @brief Main application entry point
         */
        void app_main(void) {
            ESP_LOGI(TAG, "🔌 Ice Pulse Sensor starting...");
            ESP_LOGI(TAG, "⚙️ Task Strategy: SENSOR (high) + DATA_SEND (medium) + OTA_CHECK (low)");
            
            // Inizializza applicazione
            ESP_ERROR_CHECK(app_init());
            
            // Task sensori - PRIORITÀ ALTA (5)
            xTaskCreate(sensor_task, "sensor_task", 4096, NULL, 5, &sensor_task_handle);
            
            // Task invio dati - PRIORITÀ MEDIA (4) - NO OTA CHECK
            xTaskCreate(data_send_task, "data_send_task", 8192, NULL, 4, &data_send_task_handle);
            
            // Task controllo OTA - PRIORITÀ BASSA (2) - SEPARATO
            xTaskCreate(ota_check_task, "ota_check_task", 8192, NULL, 2, &ota_check_task_handle);
            
            ESP_LOGI(TAG, "🎉 All tasks running independently!");
            
            while (1) {
                ESP_LOGI(TAG, "💚 Status - Reads:%lu | DataSent:%lu | OTAChecks:%lu", 
                         app_state.reading_count, app_state.data_send_count, app_state.ota_check_count);
                vTaskDelay(pdMS_TO_TICKS(60000)); // Status ogni minuto
            }
        }
        EOF        EOF
        
        echo "Created separated OTA logic Main.c and CMakeLists.txt"
        ls -la firmware/main/
      
    - name: Get Version
      id: get_version
      run: |
        if [ -n "${{ github.event.inputs.version_override }}" ]; then
          VERSION="${{ github.event.inputs.version_override }}"
        else
          if [ -f VERSION ]; then
            VERSION=$(cat VERSION | tr -d '\n\r' | xargs)
          else
            VERSION="fw-$(date +%Y%m%d%H%M%S)-${GITHUB_SHA:0:7}"
          fi
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Building firmware version: $VERSION"
        
    - name: Setup ESP-IDF and Build
      uses: espressif/esp-idf-ci-action@v1
      with:
        esp_idf_version: ${{ env.ESP_IDF_VERSION }}
        target: esp32
        path: 'firmware'
        command: |
          echo "=== Building ESP32 firmware ==="
          echo "Current directory: $(pwd)"
          ls -la .

          # Aggiorna version.h con versione corrente
          cat > main/version.h << EOF
          #ifndef VERSION_H
          #define VERSION_H
          #define FIRMWARE_VERSION "${{ steps.get_version.outputs.version }}"
          #define BUILD_TIMESTAMP "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          #define GIT_COMMIT "${{ github.sha }}"
          #define BUILD_NUMBER "${{ github.run_number }}"
          #endif
          EOF
          
          # Build del firmware
          idf.py set-target esp32
          idf.py build
          
          echo "=== Build completed ==="
          ls -la build/
        
    - name: Create Project Structure if Missing
      run: |
        echo "=== Setting up ESP32 project structure ==="
        
        # Se non esiste firmware/, creala
        if [ ! -d "firmware" ]; then
          echo "Creating firmware directory..."
          mkdir -p firmware
        fi
        
        cd firmware
        
        # Crea CMakeLists.txt principale se non esiste
        if [ ! -f "CMakeLists.txt" ]; then
          echo "Creating main CMakeLists.txt..."
          cat > CMakeLists.txt << 'EOF'
        cmake_minimum_required(VERSION 3.16)
        
        # Set project name
        set(PROJECT_NAME "ice-pulse-sensor")
        
        include($ENV{IDF_PATH}/tools/cmake/project.cmake)
        project(${PROJECT_NAME})
        EOF
        fi
        
        # Crea directory main/ se non esiste
        if [ ! -d "main" ]; then
          echo "Creating main directory..."
          mkdir -p main
        fi
        
        # Crea CMakeLists.txt per main/ se non esiste
        if [ ! -f "main/CMakeLists.txt" ]; then
          echo "Creating main/CMakeLists.txt..."
          cat > main/CMakeLists.txt << 'EOF'
        idf_component_register(
            SRCS "main.c"
            INCLUDE_DIRS "."
        )
        EOF
        fi
        
        # Crea main.c di base se non esiste
        if [ ! -f "main/main.c" ]; then
          echo "Creating basic main.c..."
          cat > main/main.c << 'EOF'
        #include <stdio.h>
        #include "freertos/FreeRTOS.h"
        #include "freertos/task.h"
        #include "esp_log.h"
        #include "version.h"
        
        static const char *TAG = "ice-pulse";
        
        void app_main(void)
        {
            ESP_LOGI(TAG, "Ice Pulse Sensor Starting...");
            ESP_LOGI(TAG, "Firmware Version: %s", FIRMWARE_VERSION);
            ESP_LOGI(TAG, "Build Timestamp: %s", BUILD_TIMESTAMP);
            ESP_LOGI(TAG, "Git Commit: %s", GIT_COMMIT);
            
            while (1) {
                ESP_LOGI(TAG, "Ice Pulse Sensor Running...");
                vTaskDelay(pdMS_TO_TICKS(10000));
            }
        }
        EOF
        fi
        
        # Crea sdkconfig.defaults se non esiste
        if [ ! -f "sdkconfig.defaults" ]; then
          echo "Creating sdkconfig.defaults..."
          cat > sdkconfig.defaults << 'EOF'
        # Ice Pulse Sensor Configuration
        CONFIG_ESPTOOLPY_FLASHSIZE_4MB=y
        CONFIG_PARTITION_TABLE_CUSTOM=y
        CONFIG_PARTITION_TABLE_CUSTOM_FILENAME="partitions.csv"
        CONFIG_ESP_MAIN_TASK_STACK_SIZE=8192
        CONFIG_ESP_SYSTEM_EVENT_TASK_STACK_SIZE=4096
        
        # WiFi Configuration
        CONFIG_ESP32_WIFI_STATIC_RX_BUFFER_NUM=10
        CONFIG_ESP32_WIFI_DYNAMIC_RX_BUFFER_NUM=32
        CONFIG_ESP32_WIFI_TX_BUFFER_TYPE_DYNAMIC=y
        CONFIG_ESP32_WIFI_DYNAMIC_TX_BUFFER_NUM=32
        
        # Logging
        CONFIG_LOG_DEFAULT_LEVEL_INFO=y
        CONFIG_LOG_MAXIMUM_LEVEL_DEBUG=y
        
        # OTA Configuration
        CONFIG_OTA_ALLOW_HTTP=y
        EOF
        fi
        
        # Crea partitions.csv se non esiste
        if [ ! -f "partitions.csv" ]; then
          echo "Creating partitions.csv..."
          cat > partitions.csv << 'EOF'
        # Name,   Type, SubType, Offset,  Size, Flags
        nvs,      data, nvs,     0x9000,  0x6000,
        phy_init, data, phy,     0xf000,  0x1000,
        factory,  app,  factory, 0x10000, 1M,
        ota_0,    app,  ota_0,   0x110000,1M,
        ota_1,    app,  ota_1,   0x210000,1M,
        ota_data, data, ota,     0x310000,0x2000,
        storage,  data, spiffs,  0x312000,0xEE000,
        EOF
        fi
        
        echo "=== Project structure created ==="
        ls -la .
        ls -la main/

        
    - name: Extract Build Info
      id: build_info
      run: |
        cd firmware
        
        # Determina il nome del file binario principale
        BINARY_NAME="ice-pulse-sensor.bin"
        
        # Controlla se il file principale esiste
        if [ -f "build/$BINARY_NAME" ]; then
          echo "Found main firmware binary: $BINARY_NAME"
        else
          # Cerca file .bin nella directory build escludendo file di sistema
          BINARY_NAME=$(find build/ -name "*.bin" \
            -not -path "*/bootloader/*" \
            -not -path "*/partition_table/*" \
            -not -name "*ABI*" \
            -not -name "*test*" \
            -not -name "*cmake*" \
            | grep -E "(\.bin)$" | head -1 | xargs basename 2>/dev/null)
          
          if [ -z "$BINARY_NAME" ]; then
            echo "❌ No main firmware binary found!"
            echo "Available .bin files in build/:"
            find build/ -name "*.bin" -type f | head -10
            exit 1
          fi
          
          echo "Found firmware binary: $BINARY_NAME"
        fi
        
        # Verifica che il file esista
        if [ ! -f "build/$BINARY_NAME" ]; then
          echo "❌ Binary file build/$BINARY_NAME does not exist!"
          exit 1
        fi
        
        # Informazioni sul firmware
        FIRMWARE_SIZE=$(stat -c%s "build/$BINARY_NAME")
        BOOTLOADER_SIZE=$(stat -c%s build/bootloader/bootloader.bin)
        
        echo "firmware_size=$FIRMWARE_SIZE" >> $GITHUB_OUTPUT
        echo "bootloader_size=$BOOTLOADER_SIZE" >> $GITHUB_OUTPUT
        echo "binary_name=$BINARY_NAME" >> $GITHUB_OUTPUT
        
        echo "=== Firmware Build Summary ==="
        echo "Firmware binary: $BINARY_NAME"
        echo "Firmware size: $FIRMWARE_SIZE bytes"
        echo "Bootloader size: $BOOTLOADER_SIZE bytes"
        echo "Version: ${{ steps.get_version.outputs.version }}"
        
    - name: Generate OTA Package
      run: |
        cd firmware
        mkdir -p ../ota-package
        
        BINARY_NAME="${{ steps.build_info.outputs.binary_name }}"
        
        # Copia i file necessari per OTA
        cp build/$BINARY_NAME ../ota-package/firmware.bin
        cp build/bootloader/bootloader.bin ../ota-package/
        cp build/partition_table/partition-table.bin ../ota-package/
        
        # Genera manifest OTA
        cat > ../ota-package/manifest.json << EOF
        {
          "version": "${{ steps.get_version.outputs.version }}",
          "build_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "firmware_size": ${{ steps.build_info.outputs.firmware_size }},
          "sha256": "$(sha256sum ../ota-package/firmware.bin | cut -d' ' -f1)",
          "target": "esp32",
          "idf_version": "${{ env.ESP_IDF_VERSION }}",
          "commit": "${{ github.sha }}",
          "branch": "${{ github.ref_name }}",
          "environment": "development",
          "binary_name": "$BINARY_NAME"
        }
        EOF
        
        echo "=== OTA Package created ==="
        ls -la ../ota-package/
        cat ../ota-package/manifest.json
        
    - name: Upload Firmware Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: firmware-${{ steps.get_version.outputs.version }}
        path: |
          ota-package/
          firmware/build/flash_args
          firmware/build/sdkconfig
        retention-days: 30

  package:
    name: Package OTA Server
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Download Firmware
      uses: actions/download-artifact@v4
      with:
        name: firmware-${{ needs.build.outputs.version }}
        path: ./artifacts
        
    - name: Setup OTA Server Structure
      run: |
        mkdir -p ota-server/static/firmware
        mkdir -p ota-server/templates
        
        # Copia firmware nel server OTA
        cp -r artifacts/ota-package/* ota-server/static/firmware/
        
        # Crea server OTA Flask
        cat > ota-server/app.py << 'EOF'
        from flask import Flask, jsonify, send_from_directory, render_template, request
        import os
        import json
        from datetime import datetime
        
        app = Flask(__name__)
        
        @app.route('/health')
        def health():
            return jsonify({
                "status": "ok", 
                "service": "ota-server",
                "timestamp": datetime.utcnow().isoformat() + "Z"
            })
        
        @app.route('/firmware/manifest')
        def firmware_manifest():
            try:
                with open('static/firmware/manifest.json') as f:
                    return json.load(f)
            except FileNotFoundError:
                return jsonify({"error": "No firmware available"}), 404
        
        @app.route('/firmware/download')
        def download_firmware():
            return send_from_directory('static/firmware', 'firmware.bin')
        
        @app.route('/firmware/check/<device_version>')
        def check_update(device_version):
            try:
                with open('static/firmware/manifest.json') as f:
                    manifest = json.load(f)
                
                needs_update = device_version != manifest['version']
                return jsonify({
                    "needs_update": needs_update,
                    "latest_version": manifest['version'],
                    "current_version": device_version,
                    "download_url": "/firmware/download" if needs_update else None,
                    "firmware_size": manifest.get('firmware_size', 0),
                    "sha256": manifest.get('sha256', '')
                })
            except FileNotFoundError:
                return jsonify({"error": "No firmware available"}), 404
        
        @app.route('/devices/<device_id>/update', methods=['POST'])
        def trigger_update(device_id):
            # Endpoint per triggare aggiornamenti manuali
            return jsonify({
                "device_id": device_id,
                "update_triggered": True,
                "timestamp": datetime.utcnow().isoformat() + "Z"
            })
        
        @app.route('/')
        def dashboard():
            return render_template('dashboard.html')
        
        if __name__ == '__main__':
            app.run(host='0.0.0.0', port=5000, debug=True)
        EOF
        
        # Dashboard HTML migliorato
        cat > ota-server/templates/dashboard.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>🔌 Ice Pulse OTA Server</title>
            <style>
                body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 40px; background: #f5f5f5; }
                .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                h1 { color: #2c3e50; border-bottom: 3px solid #3498db; padding-bottom: 10px; }
                .status { padding: 15px; margin: 20px 0; border-radius: 5px; }
                .status.online { background: #d4edda; border: 1px solid #c3e6cb; color: #155724; }
                .endpoint { background: #f8f9fa; padding: 15px; margin: 10px 0; border-radius: 5px; border-left: 4px solid #007bff; }
                .endpoint code { background: #e9ecef; padding: 2px 5px; border-radius: 3px; }
                a { color: #007bff; text-decoration: none; }
                a:hover { text-decoration: underline; }
                .footer { margin-top: 30px; text-align: center; color: #6c757d; font-size: 0.9em; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>🔌 Ice Pulse OTA Server</h1>
                <div class="status online">
                    ✅ Server online and ready for ESP32 firmware updates
                </div>
                
                <h2>📡 Available Endpoints</h2>
                <div class="endpoint">
                    <strong>Health Check:</strong><br>
                    <code>GET <a href="/health">/health</a></code><br>
                    <small>Check server status</small>
                </div>
                
                <div class="endpoint">
                    <strong>Firmware Manifest:</strong><br>
                    <code>GET <a href="/firmware/manifest">/firmware/manifest</a></code><br>
                    <small>Get firmware information and metadata</small>
                </div>
                
                <div class="endpoint">
                    <strong>Download Firmware:</strong><br>
                    <code>GET <a href="/firmware/download">/firmware/download</a></code><br>
                    <small>Download latest firmware binary</small>
                </div>
                
                <div class="endpoint">
                    <strong>Check for Updates:</strong><br>
                    <code>GET /firmware/check/{device_version}</code><br>
                    <small>Check if device needs firmware update</small>
                </div>
                
                <h2>🛠️ ESP32 Integration</h2>
                <p>Configure your ESP32 devices to check this server for OTA updates:</p>
                <div class="endpoint">
                    <code>#define OTA_SERVER_URL "http://your-server:8092"</code>
                </div>
                
                <div class="footer">
                    <p>Ice Pulse Sensor Firmware OTA Server | Environment: Development</p>
                </div>
            </div>
        </body>
        </html>
        EOF
        
        # Requirements per OTA server
        cat > ota-server/requirements.txt << 'EOF'
        flask==3.0.0
        gunicorn==21.2.0
        requests==2.31.0
        EOF
        
    - name: Create OTA Server Dockerfile
      run: |
        cat > ota-server/Dockerfile << 'EOF'
        FROM python:3.11-alpine
        
        WORKDIR /app
        
        # Installa curl per health checks
        RUN apk add --no-cache curl
        
        # Installa dipendenze Python
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt
        
        # Copia applicazione
        COPY . .
        
        # Crea directory per firmware se non esiste
        RUN mkdir -p static/firmware
        
        # Esponi porta
        EXPOSE 5000
        
        # Health check
        HEALTHCHECK --interval=30s --timeout=10s --retries=3 \
          CMD curl -f http://localhost:5000/health || exit 1
        
        # Avvia server
        CMD ["gunicorn", "--bind", "0.0.0.0:5000", "--workers", "2", "--timeout", "120", "app:app"]
        EOF
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and Push OTA Server
      uses: docker/build-push-action@v5
      with:
        context: ./ota-server
        push: true
        tags: |
          ${{ env.FIRMWARE_IMAGE }}-ota:${{ needs.build.outputs.version }}
          ${{ env.FIRMWARE_IMAGE }}-ota:dev-latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Update Infrastructure Repository
    runs-on: ubuntu-latest
    needs: [build, package]
    
    steps:
    - name: Setup SSH Key
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}
        
    - name: Clone Infrastructure Repository
      run: |
        echo "=== Cloning infra repository with SSH ==="
        git clone ${{ env.INFRA_REPO_URL }} infra-repo
        cd infra-repo
        git checkout ${{ env.INFRA_BRANCH }}
        
        echo "=== Git configuration ==="
        git config user.name "GitHub Actions Bot"
        git config user.email "actions@github.com"
        
    - name: Install yq
      run: |
        echo "=== Installing yq ==="
        sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
        sudo chmod +x /usr/bin/yq
        yq --version
        
    - name: Update OTA Server Configuration
      run: |
        cd infra-repo
        
        echo "=== Creating/updating OTA server docker-compose ==="
        if [ ! -f "${{ env.DEPLOY_PATH_DEV }}" ]; then
          echo "Creating firmware OTA docker-compose file..."
          mkdir -p $(dirname ${{ env.DEPLOY_PATH_DEV }})
          cat > ${{ env.DEPLOY_PATH_DEV }} << 'EOF'
        version: '3.8'
        services:
          ice-pulse-ota-dev:
            image: aipioppi/ice-pulse-firmware-ota:dev-latest
            container_name: ice-pulse-ota-dev
            ports:
              - "8092:5000"
            environment:
              - ENVIRONMENT=development
              - FLASK_ENV=development
            restart: always
            labels:
              - "com.centurylinklabs.watchtower.enable=true"
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
              interval: 30s
              timeout: 10s
              retries: 3
            logging:
              driver: "json-file"
              options:
                max-size: "10m"
                max-file: "3"
              
          watchtower-ota-dev:
            image: containrrr/watchtower
            container_name: watchtower-ota-dev
            restart: always
            volumes:
              - /var/run/docker.sock:/var/run/docker.sock
            command: --interval 180 --cleanup ice-pulse-ota-dev
            logging:
              driver: "json-file"
              options:
                max-size: "10m"
                max-file: "3"
        EOF
        fi
        
        echo "=== Updating OTA server image version ==="
        yq e -i '.services.ice-pulse-ota-dev.image = "aipioppi/ice-pulse-firmware-ota:${{ needs.build.outputs.version }}"' ${{ env.DEPLOY_PATH_DEV }}
        
        # Aggiorna timestamp e versione firmware
        TIMESTAMP=$(date +%s)
        yq e -i ".services.ice-pulse-ota-dev.environment += [\"DEPLOY_TIMESTAMP=${TIMESTAMP}\"]" ${{ env.DEPLOY_PATH_DEV }} || echo "Could not add timestamp"
        yq e -i ".services.ice-pulse-ota-dev.environment += [\"FIRMWARE_VERSION=${{ needs.build.outputs.version }}\"]" ${{ env.DEPLOY_PATH_DEV }} || echo "Could not add firmware version"
        
        echo "=== Updated OTA server configuration ==="
        cat ${{ env.DEPLOY_PATH_DEV }}
        
    - name: Commit and Push Changes
      run: |
        cd infra-repo
        
        if git diff --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        
        echo "=== Committing OTA server changes ==="
        git add ${{ env.DEPLOY_PATH_DEV }}
        git commit -m "🔌 Deploy firmware OTA dev: ${{ needs.build.outputs.version }}

        - OTA Server: aipioppi/ice-pulse-firmware-ota:${{ needs.build.outputs.version }}
        - Firmware Version: ${{ needs.build.outputs.version }}
        - Firmware Size: ${{ needs.build.outputs.firmware_size }} bytes
        - ESP-IDF Version: ${{ env.ESP_IDF_VERSION }}
        - Commit: ${{ github.sha }}
        - Actor: ${{ github.actor }}
        - Environment: development"
        
        echo "=== Pushing to remote with SSH ==="
        git push origin ${{ env.INFRA_BRANCH }}

  notify:
    name: Notify Firmware Deployment
    runs-on: ubuntu-latest
    needs: [build, package, deploy]
    if: always()
    
    steps:
    - name: Deployment Summary
      run: |
        echo "## 🔌 ESP32 Firmware Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: development" >> $GITHUB_STEP_SUMMARY
        echo "- **Firmware Version**: ${{ needs.build.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Firmware Size**: ${{ needs.build.outputs.firmware_size }} bytes" >> $GITHUB_STEP_SUMMARY
        echo "- **ESP-IDF Version**: ${{ env.ESP_IDF_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **OTA Server**: aipioppi/ice-pulse-firmware-ota:${{ needs.build.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **OTA URL**: http://localhost:8092" >> $GITHUB_STEP_SUMMARY
        echo "- **Dashboard**: http://localhost:8092/" >> $GITHUB_STEP_SUMMARY
        echo "- **Health Check**: http://localhost:8092/health" >> $GITHUB_STEP_SUMMARY
        echo "- **Firmware Download**: http://localhost:8092/firmware/download" >> $GITHUB_STEP_SUMMARY
        
    - name: Notify Success
      if: needs.deploy.result == 'success'
      run: |
        echo "✅ ESP32 Firmware deployment successful!"
        echo "Version: ${{ needs.build.outputs.version }}"
        echo "OTA Server: http://localhost:8092"
        echo "Firmware size: ${{ needs.build.outputs.firmware_size }} bytes"
        echo "ESP32 devices can now update to this version automatically"
        
    - name: Notify Failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "❌ ESP32 Firmware deployment failed!"
        echo "Check the logs above for details."